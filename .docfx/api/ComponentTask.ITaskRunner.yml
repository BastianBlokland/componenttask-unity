### YamlMime:ManagedReference
items:
- uid: ComponentTask.ITaskRunner
  commentId: T:ComponentTask.ITaskRunner
  id: ITaskRunner
  parent: ComponentTask
  children:
  - ComponentTask.ITaskRunner.StartTask(System.Func{CancellationToken,System.Threading.Tasks.Task})
  - ComponentTask.ITaskRunner.StartTask(System.Func{System.Threading.Tasks.Task})
  - ComponentTask.ITaskRunner.StartTask``1(System.Func{``0,CancellationToken,System.Threading.Tasks.Task},``0)
  - ComponentTask.ITaskRunner.StartTask``1(System.Func{``0,System.Threading.Tasks.Task},``0)
  - ComponentTask.ITaskRunner.StartTask``1(System.Func{CancellationToken,System.Threading.Tasks.Task{``0}})
  - ComponentTask.ITaskRunner.StartTask``1(System.Func{System.Threading.Tasks.Task{``0}})
  - ComponentTask.ITaskRunner.StartTask``2(System.Func{``0,CancellationToken,System.Threading.Tasks.Task{``1}},``0)
  - ComponentTask.ITaskRunner.StartTask``2(System.Func{``0,System.Threading.Tasks.Task{``1}},``0)
  langs:
  - csharp
  - vb
  name: ITaskRunner
  nameWithType: ITaskRunner
  fullName: ComponentTask.ITaskRunner
  type: Interface
  source:
    id: ITaskRunner
    path: ''
    startLine: 669
  assemblies:
  - cs.temp.dll
  namespace: ComponentTask
  summary: "\nRunner for running tasks.\n"
  example: []
  syntax:
    content: public interface ITaskRunner
    content.vb: Public Interface ITaskRunner
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: ComponentTask.ITaskRunner.StartTask(System.Func{System.Threading.Tasks.Task})
  commentId: M:ComponentTask.ITaskRunner.StartTask(System.Func{System.Threading.Tasks.Task})
  id: StartTask(System.Func{System.Threading.Tasks.Task})
  parent: ComponentTask.ITaskRunner
  langs:
  - csharp
  - vb
  name: StartTask(Func<Task>)
  nameWithType: ITaskRunner.StartTask(Func<Task>)
  fullName: ComponentTask.ITaskRunner.StartTask(System.Func<System.Threading.Tasks.Task>)
  type: Method
  source:
    id: StartTask
    path: ''
    startLine: 684
  assemblies:
  - cs.temp.dll
  namespace: ComponentTask
  summary: "\nStart a task on this runner.\n"
  example: []
  syntax:
    content: Task StartTask(Func<Task> taskCreator)
    parameters:
    - id: taskCreator
      type: System.Func{System.Threading.Tasks.Task}
      description: Function for creating the task.
    return:
      type: System.Threading.Tasks.Task
      description: "\nTask that completes when the original task completes or when the runner gets disposed.\n"
    content.vb: Function StartTask(taskCreator As Func(Of Task)) As Task
  overload: ComponentTask.ITaskRunner.StartTask*
  exceptions:
  - type: ComponentTask.Exceptions.TaskCreatorReturnedNullException
    commentId: T:ComponentTask.Exceptions.TaskCreatorReturnedNullException
    description: "\nThrown when null is returned from the &apos;taskCreator&apos;.\n"
  - type: ComponentTask.Exceptions.ComponentTaskCanceledException
    commentId: T:ComponentTask.Exceptions.ComponentTaskCanceledException
    description: "\nThrown when awaiting a component-task that gets cancelled.\n"
  nameWithType.vb: ITaskRunner.StartTask(Func(Of Task))
  fullName.vb: ComponentTask.ITaskRunner.StartTask(System.Func(Of System.Threading.Tasks.Task))
  name.vb: StartTask(Func(Of Task))
- uid: ComponentTask.ITaskRunner.StartTask(System.Func{CancellationToken,System.Threading.Tasks.Task})
  commentId: M:ComponentTask.ITaskRunner.StartTask(System.Func{CancellationToken,System.Threading.Tasks.Task})
  id: StartTask(System.Func{CancellationToken,System.Threading.Tasks.Task})
  parent: ComponentTask.ITaskRunner
  langs:
  - csharp
  - vb
  name: StartTask(Func<CancellationToken, Task>)
  nameWithType: ITaskRunner.StartTask(Func<CancellationToken, Task>)
  fullName: ComponentTask.ITaskRunner.StartTask(System.Func<CancellationToken, System.Threading.Tasks.Task>)
  type: Method
  source:
    id: StartTask
    path: ''
    startLine: 702
  assemblies:
  - cs.temp.dll
  namespace: ComponentTask
  summary: "\nStart a task on this runner.\n<see cref=\"!:CancellationToken\"></see> that is passed to the task-creator is cancelled when the\nrunner is disposed, this can be usefull for cancelling external processes.\n"
  example: []
  syntax:
    content: Task StartTask(Func<CancellationToken, Task> taskCreator)
    parameters:
    - id: taskCreator
      type: System.Func{CancellationToken,System.Threading.Tasks.Task}
      description: Function for creating the task.
    return:
      type: System.Threading.Tasks.Task
      description: "\nTask that completes when the original task completes or when the runner gets disposed.\n"
    content.vb: Function StartTask(taskCreator As Func(Of CancellationToken, Task)) As Task
  overload: ComponentTask.ITaskRunner.StartTask*
  exceptions:
  - type: ComponentTask.Exceptions.TaskCreatorReturnedNullException
    commentId: T:ComponentTask.Exceptions.TaskCreatorReturnedNullException
    description: "\nThrown when null is returned from the &apos;taskCreator&apos;.\n"
  - type: ComponentTask.Exceptions.ComponentTaskCanceledException
    commentId: T:ComponentTask.Exceptions.ComponentTaskCanceledException
    description: "\nThrown when awaiting a component-task that gets cancelled. Can happen if you are awaiting\na component that gets destroyed.\n"
  nameWithType.vb: ITaskRunner.StartTask(Func(Of CancellationToken, Task))
  fullName.vb: ComponentTask.ITaskRunner.StartTask(System.Func(Of CancellationToken, System.Threading.Tasks.Task))
  name.vb: StartTask(Func(Of CancellationToken, Task))
- uid: ComponentTask.ITaskRunner.StartTask``1(System.Func{``0,System.Threading.Tasks.Task},``0)
  commentId: M:ComponentTask.ITaskRunner.StartTask``1(System.Func{``0,System.Threading.Tasks.Task},``0)
  id: StartTask``1(System.Func{``0,System.Threading.Tasks.Task},``0)
  parent: ComponentTask.ITaskRunner
  langs:
  - csharp
  - vb
  name: StartTask<TIn>(Func<TIn, Task>, TIn)
  nameWithType: ITaskRunner.StartTask<TIn>(Func<TIn, Task>, TIn)
  fullName: ComponentTask.ITaskRunner.StartTask<TIn>(System.Func<TIn, System.Threading.Tasks.Task>, TIn)
  type: Method
  source:
    id: StartTask
    path: ''
    startLine: 719
  assemblies:
  - cs.temp.dll
  namespace: ComponentTask
  summary: "\nStart a task on this runner.\n"
  example: []
  syntax:
    content: Task StartTask<TIn>(Func<TIn, Task> taskCreator, TIn data)
    parameters:
    - id: taskCreator
      type: System.Func{{TIn},System.Threading.Tasks.Task}
      description: Function for creating the task.
    - id: data
      type: '{TIn}'
      description: Data to pass into the <code data-dev-comment-type="paramref" class="paramref">taskCreator</code>.
    typeParameters:
    - id: TIn
      description: Type of the data to pass into the <code data-dev-comment-type="paramref" class="paramref">taskCreator</code>.
    return:
      type: System.Threading.Tasks.Task
      description: "\nTask that completes when the original task completes or when the runner gets disposed.\n"
    content.vb: Function StartTask(Of TIn)(taskCreator As Func(Of TIn, Task), data As TIn) As Task
  overload: ComponentTask.ITaskRunner.StartTask*
  exceptions:
  - type: ComponentTask.Exceptions.TaskCreatorReturnedNullException
    commentId: T:ComponentTask.Exceptions.TaskCreatorReturnedNullException
    description: "\nThrown when null is returned from the &apos;taskCreator&apos;.\n"
  - type: ComponentTask.Exceptions.ComponentTaskCanceledException
    commentId: T:ComponentTask.Exceptions.ComponentTaskCanceledException
    description: "\nThrown when awaiting a component-task that gets cancelled.\n"
  nameWithType.vb: ITaskRunner.StartTask(Of TIn)(Func(Of TIn, Task), TIn)
  fullName.vb: ComponentTask.ITaskRunner.StartTask(Of TIn)(System.Func(Of TIn, System.Threading.Tasks.Task), TIn)
  name.vb: StartTask(Of TIn)(Func(Of TIn, Task), TIn)
- uid: ComponentTask.ITaskRunner.StartTask``1(System.Func{``0,CancellationToken,System.Threading.Tasks.Task},``0)
  commentId: M:ComponentTask.ITaskRunner.StartTask``1(System.Func{``0,CancellationToken,System.Threading.Tasks.Task},``0)
  id: StartTask``1(System.Func{``0,CancellationToken,System.Threading.Tasks.Task},``0)
  parent: ComponentTask.ITaskRunner
  langs:
  - csharp
  - vb
  name: StartTask<TIn>(Func<TIn, CancellationToken, Task>, TIn)
  nameWithType: ITaskRunner.StartTask<TIn>(Func<TIn, CancellationToken, Task>, TIn)
  fullName: ComponentTask.ITaskRunner.StartTask<TIn>(System.Func<TIn, CancellationToken, System.Threading.Tasks.Task>, TIn)
  type: Method
  source:
    id: StartTask
    path: ''
    startLine: 739
  assemblies:
  - cs.temp.dll
  namespace: ComponentTask
  summary: "\nStart a task on this runner.\n<see cref=\"!:CancellationToken\"></see> that is passed to the task-creator is cancelled when the\nrunner is disposed, this can be usefull for cancelling external processes.\n"
  example: []
  syntax:
    content: Task StartTask<TIn>(Func<TIn, CancellationToken, Task> taskCreator, TIn data)
    parameters:
    - id: taskCreator
      type: System.Func{{TIn},CancellationToken,System.Threading.Tasks.Task}
      description: Function for creating the task.
    - id: data
      type: '{TIn}'
      description: Data to pass into the <code data-dev-comment-type="paramref" class="paramref">taskCreator</code>.
    typeParameters:
    - id: TIn
      description: Type of the data to pass into the <code data-dev-comment-type="paramref" class="paramref">taskCreator</code>.
    return:
      type: System.Threading.Tasks.Task
      description: "\nTask that completes when the original task completes or when the runner gets disposed.\n"
    content.vb: Function StartTask(Of TIn)(taskCreator As Func(Of TIn, CancellationToken, Task), data As TIn) As Task
  overload: ComponentTask.ITaskRunner.StartTask*
  exceptions:
  - type: ComponentTask.Exceptions.TaskCreatorReturnedNullException
    commentId: T:ComponentTask.Exceptions.TaskCreatorReturnedNullException
    description: "\nThrown when null is returned from the &apos;taskCreator&apos;.\n"
  - type: ComponentTask.Exceptions.ComponentTaskCanceledException
    commentId: T:ComponentTask.Exceptions.ComponentTaskCanceledException
    description: "\nThrown when awaiting a component-task that gets cancelled. Can happen if you are awaiting\na component that gets destroyed.\n"
  nameWithType.vb: ITaskRunner.StartTask(Of TIn)(Func(Of TIn, CancellationToken, Task), TIn)
  fullName.vb: ComponentTask.ITaskRunner.StartTask(Of TIn)(System.Func(Of TIn, CancellationToken, System.Threading.Tasks.Task), TIn)
  name.vb: StartTask(Of TIn)(Func(Of TIn, CancellationToken, Task), TIn)
- uid: ComponentTask.ITaskRunner.StartTask``1(System.Func{System.Threading.Tasks.Task{``0}})
  commentId: M:ComponentTask.ITaskRunner.StartTask``1(System.Func{System.Threading.Tasks.Task{``0}})
  id: StartTask``1(System.Func{System.Threading.Tasks.Task{``0}})
  parent: ComponentTask.ITaskRunner
  langs:
  - csharp
  - vb
  name: StartTask<TOut>(Func<Task<TOut>>)
  nameWithType: ITaskRunner.StartTask<TOut>(Func<Task<TOut>>)
  fullName: ComponentTask.ITaskRunner.StartTask<TOut>(System.Func<System.Threading.Tasks.Task<TOut>>)
  type: Method
  source:
    id: StartTask
    path: ''
    startLine: 754
  assemblies:
  - cs.temp.dll
  namespace: ComponentTask
  summary: "\nStart a task on this runner.\n"
  example: []
  syntax:
    content: Task<TOut> StartTask<TOut>(Func<Task<TOut>> taskCreator)
    parameters:
    - id: taskCreator
      type: System.Func{System.Threading.Tasks.Task{{TOut}}}
      description: Function for creating the task.
    typeParameters:
    - id: TOut
    return:
      type: System.Threading.Tasks.Task{{TOut}}
      description: "\nTask that completes when the original task completes or when the runner gets disposed.\n"
    content.vb: Function StartTask(Of TOut)(taskCreator As Func(Of Task(Of TOut))) As Task(Of TOut)
  overload: ComponentTask.ITaskRunner.StartTask*
  exceptions:
  - type: ComponentTask.Exceptions.TaskCreatorReturnedNullException
    commentId: T:ComponentTask.Exceptions.TaskCreatorReturnedNullException
    description: "\nThrown when null is returned from the &apos;taskCreator&apos;.\n"
  - type: ComponentTask.Exceptions.ComponentTaskCanceledException
    commentId: T:ComponentTask.Exceptions.ComponentTaskCanceledException
    description: "\nThrown when awaiting a component-task that gets cancelled.\n"
  nameWithType.vb: ITaskRunner.StartTask(Of TOut)(Func(Of Task(Of TOut)))
  fullName.vb: ComponentTask.ITaskRunner.StartTask(Of TOut)(System.Func(Of System.Threading.Tasks.Task(Of TOut)))
  name.vb: StartTask(Of TOut)(Func(Of Task(Of TOut)))
- uid: ComponentTask.ITaskRunner.StartTask``1(System.Func{CancellationToken,System.Threading.Tasks.Task{``0}})
  commentId: M:ComponentTask.ITaskRunner.StartTask``1(System.Func{CancellationToken,System.Threading.Tasks.Task{``0}})
  id: StartTask``1(System.Func{CancellationToken,System.Threading.Tasks.Task{``0}})
  parent: ComponentTask.ITaskRunner
  langs:
  - csharp
  - vb
  name: StartTask<TOut>(Func<CancellationToken, Task<TOut>>)
  nameWithType: ITaskRunner.StartTask<TOut>(Func<CancellationToken, Task<TOut>>)
  fullName: ComponentTask.ITaskRunner.StartTask<TOut>(System.Func<CancellationToken, System.Threading.Tasks.Task<TOut>>)
  type: Method
  source:
    id: StartTask
    path: ''
    startLine: 772
  assemblies:
  - cs.temp.dll
  namespace: ComponentTask
  summary: "\nStart a task on this runner.\n<see cref=\"!:CancellationToken\"></see> that is passed to the task-creator is cancelled when the\nrunner is disposed, this can be usefull for cancelling external processes.\n"
  example: []
  syntax:
    content: Task<TOut> StartTask<TOut>(Func<CancellationToken, Task<TOut>> taskCreator)
    parameters:
    - id: taskCreator
      type: System.Func{CancellationToken,System.Threading.Tasks.Task{{TOut}}}
      description: Function for creating the task.
    typeParameters:
    - id: TOut
    return:
      type: System.Threading.Tasks.Task{{TOut}}
      description: "\nTask that completes when the original task completes or when the runner gets disposed.\n"
    content.vb: Function StartTask(Of TOut)(taskCreator As Func(Of CancellationToken, Task(Of TOut))) As Task(Of TOut)
  overload: ComponentTask.ITaskRunner.StartTask*
  exceptions:
  - type: ComponentTask.Exceptions.TaskCreatorReturnedNullException
    commentId: T:ComponentTask.Exceptions.TaskCreatorReturnedNullException
    description: "\nThrown when null is returned from the &apos;taskCreator&apos;.\n"
  - type: ComponentTask.Exceptions.ComponentTaskCanceledException
    commentId: T:ComponentTask.Exceptions.ComponentTaskCanceledException
    description: "\nThrown when awaiting a component-task that gets cancelled. Can happen if you are awaiting\na component that gets destroyed.\n"
  nameWithType.vb: ITaskRunner.StartTask(Of TOut)(Func(Of CancellationToken, Task(Of TOut)))
  fullName.vb: ComponentTask.ITaskRunner.StartTask(Of TOut)(System.Func(Of CancellationToken, System.Threading.Tasks.Task(Of TOut)))
  name.vb: StartTask(Of TOut)(Func(Of CancellationToken, Task(Of TOut)))
- uid: ComponentTask.ITaskRunner.StartTask``2(System.Func{``0,System.Threading.Tasks.Task{``1}},``0)
  commentId: M:ComponentTask.ITaskRunner.StartTask``2(System.Func{``0,System.Threading.Tasks.Task{``1}},``0)
  id: StartTask``2(System.Func{``0,System.Threading.Tasks.Task{``1}},``0)
  parent: ComponentTask.ITaskRunner
  langs:
  - csharp
  - vb
  name: StartTask<TIn, TOut>(Func<TIn, Task<TOut>>, TIn)
  nameWithType: ITaskRunner.StartTask<TIn, TOut>(Func<TIn, Task<TOut>>, TIn)
  fullName: ComponentTask.ITaskRunner.StartTask<TIn, TOut>(System.Func<TIn, System.Threading.Tasks.Task<TOut>>, TIn)
  type: Method
  source:
    id: StartTask
    path: ''
    startLine: 789
  assemblies:
  - cs.temp.dll
  namespace: ComponentTask
  summary: "\nStart a task on this runner.\n"
  example: []
  syntax:
    content: Task<TOut> StartTask<TIn, TOut>(Func<TIn, Task<TOut>> taskCreator, TIn data)
    parameters:
    - id: taskCreator
      type: System.Func{{TIn},System.Threading.Tasks.Task{{TOut}}}
      description: Function for creating the task.
    - id: data
      type: '{TIn}'
      description: Data to pass into the <code data-dev-comment-type="paramref" class="paramref">taskCreator</code>.
    typeParameters:
    - id: TIn
      description: Type of the data to pass into the <code data-dev-comment-type="paramref" class="paramref">taskCreator</code>.
    - id: TOut
    return:
      type: System.Threading.Tasks.Task{{TOut}}
      description: "\nTask that completes when the original task completes or when the runner gets disposed.\n"
    content.vb: Function StartTask(Of TIn, TOut)(taskCreator As Func(Of TIn, Task(Of TOut)), data As TIn) As Task(Of TOut)
  overload: ComponentTask.ITaskRunner.StartTask*
  exceptions:
  - type: ComponentTask.Exceptions.TaskCreatorReturnedNullException
    commentId: T:ComponentTask.Exceptions.TaskCreatorReturnedNullException
    description: "\nThrown when null is returned from the &apos;taskCreator&apos;.\n"
  - type: ComponentTask.Exceptions.ComponentTaskCanceledException
    commentId: T:ComponentTask.Exceptions.ComponentTaskCanceledException
    description: "\nThrown when awaiting a component-task that gets cancelled.\n"
  nameWithType.vb: ITaskRunner.StartTask(Of TIn, TOut)(Func(Of TIn, Task(Of TOut)), TIn)
  fullName.vb: ComponentTask.ITaskRunner.StartTask(Of TIn, TOut)(System.Func(Of TIn, System.Threading.Tasks.Task(Of TOut)), TIn)
  name.vb: StartTask(Of TIn, TOut)(Func(Of TIn, Task(Of TOut)), TIn)
- uid: ComponentTask.ITaskRunner.StartTask``2(System.Func{``0,CancellationToken,System.Threading.Tasks.Task{``1}},``0)
  commentId: M:ComponentTask.ITaskRunner.StartTask``2(System.Func{``0,CancellationToken,System.Threading.Tasks.Task{``1}},``0)
  id: StartTask``2(System.Func{``0,CancellationToken,System.Threading.Tasks.Task{``1}},``0)
  parent: ComponentTask.ITaskRunner
  langs:
  - csharp
  - vb
  name: StartTask<TIn, TOut>(Func<TIn, CancellationToken, Task<TOut>>, TIn)
  nameWithType: ITaskRunner.StartTask<TIn, TOut>(Func<TIn, CancellationToken, Task<TOut>>, TIn)
  fullName: ComponentTask.ITaskRunner.StartTask<TIn, TOut>(System.Func<TIn, CancellationToken, System.Threading.Tasks.Task<TOut>>, TIn)
  type: Method
  source:
    id: StartTask
    path: ''
    startLine: 807
  assemblies:
  - cs.temp.dll
  namespace: ComponentTask
  summary: "\nStart a task on this runner.\n<see cref=\"!:CancellationToken\"></see> that is passed to the task-creator is cancelled when the\nrunner is disposed, this can be usefull for cancelling external processes.\n"
  example: []
  syntax:
    content: Task<TOut> StartTask<TIn, TOut>(Func<TIn, CancellationToken, Task<TOut>> taskCreator, TIn data)
    parameters:
    - id: taskCreator
      type: System.Func{{TIn},CancellationToken,System.Threading.Tasks.Task{{TOut}}}
      description: Function for creating the task.
    - id: data
      type: '{TIn}'
    typeParameters:
    - id: TIn
    - id: TOut
    return:
      type: System.Threading.Tasks.Task{{TOut}}
      description: "\nTask that completes when the original task completes or when the runner gets disposed.\n"
    content.vb: Function StartTask(Of TIn, TOut)(taskCreator As Func(Of TIn, CancellationToken, Task(Of TOut)), data As TIn) As Task(Of TOut)
  overload: ComponentTask.ITaskRunner.StartTask*
  exceptions:
  - type: ComponentTask.Exceptions.TaskCreatorReturnedNullException
    commentId: T:ComponentTask.Exceptions.TaskCreatorReturnedNullException
    description: "\nThrown when null is returned from the &apos;taskCreator&apos;.\n"
  - type: ComponentTask.Exceptions.ComponentTaskCanceledException
    commentId: T:ComponentTask.Exceptions.ComponentTaskCanceledException
    description: "\nThrown when awaiting a component-task that gets cancelled. Can happen if you are awaiting\na component that gets destroyed.\n"
  nameWithType.vb: ITaskRunner.StartTask(Of TIn, TOut)(Func(Of TIn, CancellationToken, Task(Of TOut)), TIn)
  fullName.vb: ComponentTask.ITaskRunner.StartTask(Of TIn, TOut)(System.Func(Of TIn, CancellationToken, System.Threading.Tasks.Task(Of TOut)), TIn)
  name.vb: StartTask(Of TIn, TOut)(Func(Of TIn, CancellationToken, Task(Of TOut)), TIn)
references:
- uid: ComponentTask
  commentId: N:ComponentTask
  name: ComponentTask
  nameWithType: ComponentTask
  fullName: ComponentTask
- uid: ComponentTask.Exceptions.TaskCreatorReturnedNullException
  commentId: T:ComponentTask.Exceptions.TaskCreatorReturnedNullException
  name: TaskCreatorReturnedNullException
  nameWithType: TaskCreatorReturnedNullException
  fullName: ComponentTask.Exceptions.TaskCreatorReturnedNullException
- uid: ComponentTask.Exceptions.ComponentTaskCanceledException
  commentId: T:ComponentTask.Exceptions.ComponentTaskCanceledException
  name: ComponentTaskCanceledException
  nameWithType: ComponentTaskCanceledException
  fullName: ComponentTask.Exceptions.ComponentTaskCanceledException
- uid: ComponentTask.ITaskRunner.StartTask*
  commentId: Overload:ComponentTask.ITaskRunner.StartTask
  name: StartTask
  nameWithType: ITaskRunner.StartTask
  fullName: ComponentTask.ITaskRunner.StartTask
- uid: System.Func{System.Threading.Tasks.Task}
  commentId: T:System.Func{System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`1
  name: Func<Task>
  nameWithType: Func<Task>
  fullName: System.Func<System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of Task)
  fullName.vb: System.Func(Of System.Threading.Tasks.Task)
  name.vb: Func(Of Task)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Func{CancellationToken,System.Threading.Tasks.Task}
  commentId: T:System.Func{CancellationToken,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`2
  name: Func<CancellationToken, Task>
  nameWithType: Func<CancellationToken, Task>
  fullName: System.Func<CancellationToken, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of CancellationToken, Task)
  fullName.vb: System.Func(Of CancellationToken, System.Threading.Tasks.Task)
  name.vb: Func(Of CancellationToken, Task)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TIn},System.Threading.Tasks.Task}
  commentId: T:System.Func{``0,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`2
  name: Func<TIn, Task>
  nameWithType: Func<TIn, Task>
  fullName: System.Func<TIn, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of TIn, Task)
  fullName.vb: System.Func(Of TIn, System.Threading.Tasks.Task)
  name.vb: Func(Of TIn, Task)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TIn}'
  commentId: '!:TIn'
  definition: TIn
  name: TIn
  nameWithType: TIn
  fullName: TIn
- uid: TIn
  name: TIn
  nameWithType: TIn
  fullName: TIn
- uid: System.Func{{TIn},CancellationToken,System.Threading.Tasks.Task}
  commentId: T:System.Func{``0,CancellationToken,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`3
  name: Func<TIn, CancellationToken, Task>
  nameWithType: Func<TIn, CancellationToken, Task>
  fullName: System.Func<TIn, CancellationToken, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of TIn, CancellationToken, Task)
  fullName.vb: System.Func(Of TIn, CancellationToken, System.Threading.Tasks.Task)
  name.vb: Func(Of TIn, CancellationToken, Task)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.Threading.Tasks.Task{{TOut}}}
  commentId: T:System.Func{System.Threading.Tasks.Task{``0}}
  parent: System
  definition: System.Func`1
  name: Func<Task<TOut>>
  nameWithType: Func<Task<TOut>>
  fullName: System.Func<System.Threading.Tasks.Task<TOut>>
  nameWithType.vb: Func(Of Task(Of TOut))
  fullName.vb: System.Func(Of System.Threading.Tasks.Task(Of TOut))
  name.vb: Func(Of Task(Of TOut))
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TOut}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TOut>
  nameWithType: Task<TOut>
  fullName: System.Threading.Tasks.Task<TOut>
  nameWithType.vb: Task(Of TOut)
  fullName.vb: System.Threading.Tasks.Task(Of TOut)
  name.vb: Task(Of TOut)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{CancellationToken,System.Threading.Tasks.Task{{TOut}}}
  commentId: T:System.Func{CancellationToken,System.Threading.Tasks.Task{``0}}
  parent: System
  definition: System.Func`2
  name: Func<CancellationToken, Task<TOut>>
  nameWithType: Func<CancellationToken, Task<TOut>>
  fullName: System.Func<CancellationToken, System.Threading.Tasks.Task<TOut>>
  nameWithType.vb: Func(Of CancellationToken, Task(Of TOut))
  fullName.vb: System.Func(Of CancellationToken, System.Threading.Tasks.Task(Of TOut))
  name.vb: Func(Of CancellationToken, Task(Of TOut))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TIn},System.Threading.Tasks.Task{{TOut}}}
  commentId: T:System.Func{``0,System.Threading.Tasks.Task{``1}}
  parent: System
  definition: System.Func`2
  name: Func<TIn, Task<TOut>>
  nameWithType: Func<TIn, Task<TOut>>
  fullName: System.Func<TIn, System.Threading.Tasks.Task<TOut>>
  nameWithType.vb: Func(Of TIn, Task(Of TOut))
  fullName.vb: System.Func(Of TIn, System.Threading.Tasks.Task(Of TOut))
  name.vb: Func(Of TIn, Task(Of TOut))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TIn},CancellationToken,System.Threading.Tasks.Task{{TOut}}}
  commentId: T:System.Func{``0,CancellationToken,System.Threading.Tasks.Task{``1}}
  parent: System
  definition: System.Func`3
  name: Func<TIn, CancellationToken, Task<TOut>>
  nameWithType: Func<TIn, CancellationToken, Task<TOut>>
  fullName: System.Func<TIn, CancellationToken, System.Threading.Tasks.Task<TOut>>
  nameWithType.vb: Func(Of TIn, CancellationToken, Task(Of TOut))
  fullName.vb: System.Func(Of TIn, CancellationToken, System.Threading.Tasks.Task(Of TOut))
  name.vb: Func(Of TIn, CancellationToken, Task(Of TOut))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
