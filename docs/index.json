{
  "api/UnityEngine.ComponentExtensions.html": {
    "href": "api/UnityEngine.ComponentExtensions.html",
    "title": "Class ComponentExtensions | ComponentTask",
    "keywords": "Class ComponentExtensions Extensions for 'UnityEngine.Component'. Inheritance System.Object ComponentExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ToString() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : UnityEngine Assembly : cs.temp.dll.dll Syntax public static class ComponentExtensions Methods GetTaskRunner(Component, TaskRunOptions) Get a ITaskRunner for the given component. Declaration public static ITaskRunner GetTaskRunner(this Component component, TaskRunOptions options = TaskRunOptions.Default) Parameters Type Name Description Component component Component to get the runner for. TaskRunOptions options Options for configuring how tasks are run on this runner. Returns Type Description ITaskRunner ITaskRunner scoped to the given component. Remarks If a existing runner exists for the component then that is returned, otherwise a new runner is created. Can only be called from the unity-thread in play-mode. Exceptions Type Condition NotPlayingException Thrown when called in edit-mode. NonUnityThreadException Thrown when called from a non-unity thread. StartTask(Component, Func<CancellationToken, Task>, TaskRunOptions) Start a task scoped to the given component. System.Threading.CancellationToken that is passed to the task-creator is cancelled when the component gets destroyed, this can be usefull for cancelling external processes. Declaration public static Task StartTask(this Component component, Func<CancellationToken, Task> taskCreator, TaskRunOptions options = TaskRunOptions.Default) Parameters Type Name Description Component component Component to run the task 'on'. System.Func < System.Threading.CancellationToken , System.Threading.Tasks.Task > taskCreator Function for creating the task. TaskRunOptions options Options for configuring how the task is run. Returns Type Description System.Threading.Tasks.Task Task that completes when the original task completes or when the component gets destroyed. Remarks The task will run 'on' the component, meaning that the task gets paused when the component is disabled and the task will get cancelled when the component is destroyed. Can only be called from the unity-thread in play-mode. Exceptions Type Condition NotPlayingException Thrown when called in edit-mode. NonUnityThreadException Thrown when called from a non-unity thread. TaskCreatorReturnedNullException Thrown when null is returned from the 'taskCreator'. ComponentTaskCanceledException Thrown when awaiting a component-task that gets cancelled. Can happen if you are awaiting a component that gets destroyed. InactiveGameObjectException Thrown when attempting to start a task on a disabled gameobject. InactiveComponentException Thrown when attempting to start a task on a disabled component. Does not happen when giving UpdateWhileComponentDisabled flag. StartTask(Component, Func<Task>, TaskRunOptions) Start a task scoped to the given component. Declaration public static Task StartTask(this Component component, Func<Task> taskCreator, TaskRunOptions options = TaskRunOptions.Default) Parameters Type Name Description Component component Component to run the task 'on'. System.Func < System.Threading.Tasks.Task > taskCreator Function for creating the task. TaskRunOptions options Options for configuring how the task is run. Returns Type Description System.Threading.Tasks.Task Task that completes when the original task completes or when the component gets destroyed. Remarks The task will run 'on' the component, meaning that the task gets paused when the component is disabled and the task will get cancelled when the component is destroyed. Can only be called from the unity-thread in play-mode. Exceptions Type Condition NotPlayingException Thrown when called in edit-mode. NonUnityThreadException Thrown when called from a non-unity thread. TaskCreatorReturnedNullException Thrown when null is returned from the 'taskCreator'. ComponentTaskCanceledException Thrown when awaiting a component-task that gets cancelled. Can happen if you are awaiting a component that gets destroyed. InactiveGameObjectException Thrown when attempting to start a task on a disabled gameobject. InactiveComponentException Thrown when attempting to start a task on a disabled component. Does not happen when giving UpdateWhileComponentDisabled flag. StartTask<TIn>(Component, Func<TIn, CancellationToken, Task>, TIn, TaskRunOptions) Start a task scoped to the given component. System.Threading.CancellationToken that is passed to the task-creator is cancelled when the component gets destroyed, this can be usefull for cancelling external processes. Declaration public static Task StartTask<TIn>(this Component component, Func<TIn, CancellationToken, Task> taskCreator, TIn data, TaskRunOptions options = TaskRunOptions.Default) Parameters Type Name Description Component component Component to run the task 'on'. System.Func <TIn, System.Threading.CancellationToken , System.Threading.Tasks.Task > taskCreator Function for creating the task. TIn data TaskRunOptions options Options for configuring how the task is run. Returns Type Description System.Threading.Tasks.Task Task that completes when the original task completes or when the component gets destroyed. Type Parameters Name Description TIn Remarks The task will run 'on' the component, meaning that the task gets paused when the component is disabled and the task will get cancelled when the component is destroyed. Can only be called from the unity-thread in play-mode. Exceptions Type Condition NotPlayingException Thrown when called in edit-mode. NonUnityThreadException Thrown when called from a non-unity thread. TaskCreatorReturnedNullException Thrown when null is returned from the 'taskCreator'. ComponentTaskCanceledException Thrown when awaiting a component-task that gets cancelled. Can happen if you are awaiting a component that gets destroyed. InactiveGameObjectException Thrown when attempting to start a task on a disabled gameobject. InactiveComponentException Thrown when attempting to start a task on a disabled component. Does not happen when giving UpdateWhileComponentDisabled flag. StartTask<TIn>(Component, Func<TIn, Task>, TIn, TaskRunOptions) Start a task scoped to the given component. Declaration public static Task StartTask<TIn>(this Component component, Func<TIn, Task> taskCreator, TIn data, TaskRunOptions options = TaskRunOptions.Default) Parameters Type Name Description Component component Component to run the task 'on'. System.Func <TIn, System.Threading.Tasks.Task > taskCreator Function for creating the task. TIn data TaskRunOptions options Options for configuring how the task is run. Returns Type Description System.Threading.Tasks.Task Task that completes when the original task completes or when the component gets destroyed. Type Parameters Name Description TIn Remarks The task will run 'on' the component, meaning that the task gets paused when the component is disabled and the task will get cancelled when the component is destroyed. Can only be called from the unity-thread in play-mode. Exceptions Type Condition NotPlayingException Thrown when called in edit-mode. NonUnityThreadException Thrown when called from a non-unity thread. TaskCreatorReturnedNullException Thrown when null is returned from the 'taskCreator'. ComponentTaskCanceledException Thrown when awaiting a component-task that gets cancelled. Can happen if you are awaiting a component that gets destroyed. InactiveGameObjectException Thrown when attempting to start a task on a disabled gameobject. InactiveComponentException Thrown when attempting to start a task on a disabled component. Does not happen when giving UpdateWhileComponentDisabled flag. StartTask<TOut>(Component, Func<CancellationToken, Task<TOut>>, TaskRunOptions) Start a task scoped to the given component. System.Threading.CancellationToken that is passed to the task-creator is cancelled when the component gets destroyed, this can be usefull for cancelling external processes. Declaration public static Task<TOut> StartTask<TOut>(this Component component, Func<CancellationToken, Task<TOut>> taskCreator, TaskRunOptions options = TaskRunOptions.Default) Parameters Type Name Description Component component Component to run the task 'on'. System.Func < System.Threading.CancellationToken , System.Threading.Tasks.Task <TOut>> taskCreator Function for creating the task. TaskRunOptions options Options for configuring how the task is run. Returns Type Description System.Threading.Tasks.Task <TOut> Task that completes when the original task completes or when the component gets destroyed. Type Parameters Name Description TOut Remarks The task will run 'on' the component, meaning that the task gets paused when the component is disabled and the task will get cancelled when the component is destroyed. Can only be called from the unity-thread in play-mode. Exceptions Type Condition NotPlayingException Thrown when called in edit-mode. NonUnityThreadException Thrown when called from a non-unity thread. TaskCreatorReturnedNullException Thrown when null is returned from the 'taskCreator'. ComponentTaskCanceledException Thrown when awaiting a component-task that gets cancelled. Can happen if you are awaiting a component that gets destroyed. InactiveGameObjectException Thrown when attempting to start a task on a disabled gameobject. InactiveComponentException Thrown when attempting to start a task on a disabled component. Does not happen when giving UpdateWhileComponentDisabled flag. StartTask<TOut>(Component, Func<Task<TOut>>, TaskRunOptions) Start a task scoped to the given component. Declaration public static Task<TOut> StartTask<TOut>(this Component component, Func<Task<TOut>> taskCreator, TaskRunOptions options = TaskRunOptions.Default) Parameters Type Name Description Component component Component to run the task 'on'. System.Func < System.Threading.Tasks.Task <TOut>> taskCreator Function for creating the task. TaskRunOptions options Options for configuring how the task is run. Returns Type Description System.Threading.Tasks.Task <TOut> Task that completes when the original task completes or when the component gets destroyed. Type Parameters Name Description TOut Remarks The task will run 'on' the component, meaning that the task gets paused when the component is disabled and the task will get cancelled when the component is destroyed. Can only be called from the unity-thread in play-mode. Exceptions Type Condition NotPlayingException Thrown when called in edit-mode. NonUnityThreadException Thrown when called from a non-unity thread. TaskCreatorReturnedNullException Thrown when null is returned from the 'taskCreator'. ComponentTaskCanceledException Thrown when awaiting a component-task that gets cancelled. Can happen if you are awaiting a component that gets destroyed. InactiveGameObjectException Thrown when attempting to start a task on a disabled gameobject. InactiveComponentException Thrown when attempting to start a task on a disabled component. Does not happen when giving UpdateWhileComponentDisabled flag. StartTask<TIn, TOut>(Component, Func<TIn, CancellationToken, Task<TOut>>, TIn, TaskRunOptions) Start a task scoped to the given component. System.Threading.CancellationToken that is passed to the task-creator is cancelled when the component gets destroyed, this can be usefull for cancelling external processes. Declaration public static Task<TOut> StartTask<TIn, TOut>(this Component component, Func<TIn, CancellationToken, Task<TOut>> taskCreator, TIn data, TaskRunOptions options = TaskRunOptions.Default) Parameters Type Name Description Component component Component to run the task 'on'. System.Func <TIn, System.Threading.CancellationToken , System.Threading.Tasks.Task <TOut>> taskCreator Function for creating the task. TIn data TaskRunOptions options Options for configuring how the task is run. Returns Type Description System.Threading.Tasks.Task <TOut> Task that completes when the original task completes or when the component gets destroyed. Type Parameters Name Description TIn TOut Remarks The task will run 'on' the component, meaning that the task gets paused when the component is disabled and the task will get cancelled when the component is destroyed. Can only be called from the unity-thread in play-mode. Exceptions Type Condition NotPlayingException Thrown when called in edit-mode. NonUnityThreadException Thrown when called from a non-unity thread. TaskCreatorReturnedNullException Thrown when null is returned from the 'taskCreator'. ComponentTaskCanceledException Thrown when awaiting a component-task that gets cancelled. Can happen if you are awaiting a component that gets destroyed. InactiveGameObjectException Thrown when attempting to start a task on a disabled gameobject. InactiveComponentException Thrown when attempting to start a task on a disabled component. Does not happen when giving UpdateWhileComponentDisabled flag. StartTask<TIn, TOut>(Component, Func<TIn, Task<TOut>>, TIn, TaskRunOptions) Start a task scoped to the given component. Declaration public static Task<TOut> StartTask<TIn, TOut>(this Component component, Func<TIn, Task<TOut>> taskCreator, TIn data, TaskRunOptions options = TaskRunOptions.Default) Parameters Type Name Description Component component Component to run the task 'on'. System.Func <TIn, System.Threading.Tasks.Task <TOut>> taskCreator Function for creating the task. TIn data TaskRunOptions options Options for configuring how the task is run. Returns Type Description System.Threading.Tasks.Task <TOut> Task that completes when the original task completes or when the component gets destroyed. Type Parameters Name Description TIn TOut Remarks The task will run 'on' the component, meaning that the task gets paused when the component is disabled and the task will get cancelled when the component is destroyed. Can only be called from the unity-thread in play-mode. Exceptions Type Condition NotPlayingException Thrown when called in edit-mode. NonUnityThreadException Thrown when called from a non-unity thread. TaskCreatorReturnedNullException Thrown when null is returned from the 'taskCreator'. ComponentTaskCanceledException Thrown when awaiting a component-task that gets cancelled. Can happen if you are awaiting a component that gets destroyed. InactiveGameObjectException Thrown when attempting to start a task on a disabled gameobject. InactiveComponentException Thrown when attempting to start a task on a disabled component. Does not happen when giving UpdateWhileComponentDisabled flag."
  },
  "how-to.html": {
    "href": "how-to.html",
    "title": "How To | ComponentTask",
    "keywords": "How To Usage Start a 'Task' on your MonoBehaviour with this.StartTask(...) . The task then runs 'on' your MonoBehaviour meaning it gets paused when your MonoBehaviour is disabled and it gets stopped when your MonoBehaviour gets destroyed. This means that inside your task you don't need to worry about being destroyed. Any exceptions that happen inside your Task are reported to the Unity log, so no silent failures. Basic example using System.Threading.Tasks; using UnityEngine; class MyClass : MonoBehaviour { void Start() { this.StartTask(RunAsync); } async Task RunAsync() { while (true) { Debug.Log(\"Running...\"); await Task.Yield(); } } } This example will print Running... every frame when the component is enabled and will stop when the component gets destroyed."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Api Reference | ComponentTask",
    "keywords": "Api Reference Main api lives in the ' ComponentTask ' namespace. And some extension methods live in the UnityEngine namespace. Reason for having those extension methods live in the UnityEngine namespace is that it avoids users having to add using directives and also makes the api more discoverable as it will show up in intellisense. To avoid cluttering the UnityEngine namespace as few as possibles types live there. Namespaces ComponentTask UnityEngine Source All source is available on Github ."
  },
  "api/ComponentTask.Exceptions.ComponentTaskCanceledException.html": {
    "href": "api/ComponentTask.Exceptions.ComponentTaskCanceledException.html",
    "title": "Class ComponentTaskCanceledException | ComponentTask",
    "keywords": "Class ComponentTaskCanceledException Exception that is attached to tasks returned from ITaskRunner when they are cancelled. Inheritance System.Object System.Exception System.SystemException System.OperationCanceledException System.Threading.Tasks.TaskCanceledException ComponentTaskCanceledException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Threading.Tasks.TaskCanceledException.Task System.OperationCanceledException.CancellationToken System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ComponentTask.Exceptions Assembly : cs.temp.dll.dll Syntax public sealed class ComponentTaskCanceledException : TaskCanceledException, ISerializable, _Exception Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "examples.html": {
    "href": "examples.html",
    "title": "Examples | ComponentTask",
    "keywords": "Examples These examples can also be found in the .example directory. Basic example using System.Threading.Tasks; using UnityEngine; class MyClass : MonoBehaviour { void Start() { this.StartTask(RunAsync); } async Task RunAsync() { while (true) { Debug.Log(\"Running...\"); await Task.Yield(); } } } This example will print Running... every frame when the component is enabled and will stop when the component gets destroyed. Awaiting other methods using System; using System.Threading.Tasks; using UnityEngine; class MyClass : MonoBehaviour { void Start() { this.StartTask(RunAsync); } async Task RunAsync() { while (true) { var val = await GetValueAsync(); Debug.Log($\"Got value: '{val}'\"); } } async Task<int> GetValueAsync() { await Task.Delay(TimeSpan.FromSeconds(1)); return Time.frameCount; } } When you await other methods they automatically belong to the same scope as the task that starts them. So in this example GetValueAsync also runs as part of the MyClass scope and stops when the component is destroyed. Exposing a method that produces a value But what if you want to expose a api that produces a value, what happens to the task once your component gets destroyed. using System; using System.Threading.Tasks; using UnityEngine; class Producer : MonoBehaviour { public Task<int> GetValueAsync() => this.StartTask(ProduceValueAsync); async Task<int> ProduceValueAsync() { await Task.Delay(TimeSpan.FromSeconds(1)); return Time.frameCount; } } The Task (or Task<T> ) returned out of This.StartTask(...) properly goes into a 'cancelled' state when the component is destroyed. Which means that when you await that task you will get a TaskCanceledException that you can handle. On the receiving side: using System.Threading.Tasks; using UnityEngine; class Consumer : MonoBehaviour { [SerializeField] private Producer producer; void Start() { this.StartTask(RunAsync); } async Task RunAsync() { try { var val = await producer.GetValueAsync(); Debug.Log($\"Got value: '{val}'\"); } catch (TaskCanceledException) { Debug.Log(\"The producer was destroyed before producing the result\"); } } } If you don't catch the exception then the exception is logged to the unity log and your task will go to a faulted state. But the nice thing is that if both components have the same lifetime (destroyed at the same time) then there is no problem (and you won't get any exceptions). Avoiding closures To avoid having to capture closures you can pass an argument into you task using this.StartTask(...) . using System; using System.Threading.Tasks; using UnityEngine; class MyClass : MonoBehaviour { void Start() { var delay = 1; this.StartTask(WaitAndDoSomethingAsync, delay); } async Task WaitAndDoSomethingAsync(int secondsDelay) { await Task.Delay(TimeSpan.FromSeconds(secondsDelay)); Debug.Log(\"Doing something\"); } } Only one argument is supported but with the 'new' tuples in c# 7 there is a nice (and efficient) workaround: using System; using System.Threading.Tasks; using UnityEngine; class MyClassWithValueTuple : MonoBehaviour { void Start() { this.StartTask(WaitAndLog, (secondsDelay: 1, message: \"Hello World\")); } async Task WaitAndLog((int secondsDelay, string message) input) { await Task.Delay(TimeSpan.FromSeconds(input.secondsDelay)); Debug.Log(input.message); } } Cancelling external work To make it easier to cancel external work when your component is destroyed this.StartTask(...) optionally gives you a CancellationToken to give to external api's. using System.Net.Http; using System.Threading; using System.Threading.Tasks; using UnityEngine; class MyClass : MonoBehaviour { void Start() { var url = \"https://github.com/BastianBlokland/componenttask-unity\"; this.StartTask(DownloadTextAsync, url); } async Task DownloadTextAsync(string url, CancellationToken cancelToken) { using (var client = new HttpClient()) { var response = await client.GetAsync(url, cancelToken); var responseText = await response.Content.ReadAsStringAsync(); Debug.Log($\"Text: '{responseText}'\"); } } } Giving the CancellationToken here will make sure that the web-request is actually aborted when this component is destroyed. Running expensive blocking work on a background thread Something that the Task based model make very easy is interacting with code that runs on a different thread. You can for example run your expensive blocking code in a background thread and await a Task handle to it. using System; using System.Threading; using System.Threading.Tasks; using UnityEngine; class MyClass : MonoBehaviour { void Start() { this.StartTask(RunAsync); } async Task RunAsync() { var result = await Task.Run(VeryExpensiveBlockingCode); Debug.Log($\"Got value: '{result}'\"); } int VeryExpensiveBlockingCode() { Thread.Sleep(TimeSpan.FromSeconds(5)); return 42; } } Even though VeryExpensiveBlockingCode blocks for 5 seconds because we run it on a background-thread (with Task.Run ) the unity-thread stays responsive. Caching a task-runner. If you are going to start many tasks you can also create a ITaskRunner on a gameobject and cache a reference to it. That runner will remain valid as long as that gameobject is still alive. using System.Threading.Tasks; using UnityEngine; using ComponentTask; class MyClass : MonoBehaviour { private ITaskRunner runner; void Start() { this.runner = this.gameObject.CreateTaskRunner(); } void Update() { this.runner.StartTask(this.WaitAndLogAsync); } async Task WaitAndLogAsync() { await Task.Yield(); Debug.Log(\"Running\"); } } Custom LocalTaskRunner. If you dont to scope you tasks to Unity Components but control the update ticks yourself you can manually create a 'LocalTaskRunner' and control its ticks yourself. using System; using System.Threading.Tasks; using UnityEngine; using ComponentTask; class MyClass : MonoBehaviour, IExceptionHandler { [SerializeField] private bool isPaused; private LocalTaskRunner runner; void Start() { this.runner = new LocalTaskRunner(exceptionHandler: this); this.runner.StartTask(this.RunAsync); } void Update() { if (!this.isPaused) this.runner.Execute(); } void OnDestroy() { this.runner.Dispose(); } async Task RunAsync() { while (true) { Debug.Log(\"Running\"); await Task.Yield(); } } void IExceptionHandler.Handle(Exception exception) { Debug.Log($\"Exception occurred: '{exception.Message}'\"); } } OnGUI tasks using custom LocalTaskRunner. Because with a custom LocalTaskRunner you control when tasks are updated you could implement tasks that run during OnGUI to draw ui. using System; using System.Threading.Tasks; using UnityEngine; using ComponentTask; class MyClass : MonoBehaviour, IExceptionHandler { private LocalTaskRunner guiTaskRunner; void Start() { this.guiTaskRunner = new LocalTaskRunner(exceptionHandler: this); this.guiTaskRunner.StartTask(this.DrawUIAsync); } void OnGUI() { this.guiTaskRunner.Execute(); } void OnDestroy() { this.guiTaskRunner.Dispose(); } async Task DrawUIAsync() { while (true) { await Task.Yield(); GUI.Label(new Rect(0f, 0f, 100f, 100f), \"Drawn from a task :)\"); } } void IExceptionHandler.Handle(Exception exception) { Debug.Log($\"Exception occurred: '{exception.Message}'\"); } } Using a similar pattern your can make tasks task run during FixedUpdate to interact with Unity's physics world for example."
  },
  "api/ComponentTask.Exceptions.InactiveGameObjectException.html": {
    "href": "api/ComponentTask.Exceptions.InactiveGameObjectException.html",
    "title": "Class InactiveGameObjectException | ComponentTask",
    "keywords": "Class InactiveGameObjectException Exception that is thrown when attempting to execute a operation on a inactive gameobject. Inheritance System.Object System.Exception System.SystemException System.InvalidOperationException InactiveGameObjectException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ComponentTask.Exceptions Assembly : cs.temp.dll.dll Syntax public sealed class InactiveGameObjectException : InvalidOperationException, ISerializable, _Exception Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "index.html": {
    "href": "index.html",
    "title": "ComponentTask-Unity | ComponentTask",
    "keywords": "ComponentTask-Unity Unity package for running dotnet Task and Task<T> scoped to Unity components. Description Common problem with using c# async methods in Unity is that they have no concept of a component life-time. So unlike Coroutines when you 'start' a task and then destroy the component (by loading a new scene for example) the task does not stop. Most of the time leading to UnityEngine.MissingReferenceException when you try to access members of the component after it has been destroyed on the Unity side. And as a workaround you have to write ugly ' if (!this) return; ' guards after every await. This library aims to fix that problem by allowing you to run tasks 'on' your MonoBehaviour with very similar behaviour as Unity's Coroutines . Documentation Install How To Examples Api Reference Repository CI Basic Azure pipeline for running tests: Pipeline ."
  },
  "install.html": {
    "href": "install.html",
    "title": "Installation | ComponentTask",
    "keywords": "Installation Add package Add a reference to this repository to your package dependencies ( Packages/manifest.json ) \"dependencies\": { \"com.bastianblokland.componenttask\": \"https://github.com/BastianBlokland/componenttask-unity.git#v1.6\", ... } Use the tag at the end to specify the version to use. Latest version: Avoid adding a git path without a tag as latest master is not guaranteed to be stable, also it will make package resolving non-deterministic as every time you resolve master it might be a different commit. Upgrading To update to a newer version simply open your package manifest ( Packages/manifest.json ) and set the tag at the end of the git url (for example v1.6 ) to a later version."
  },
  "api/ComponentTask.Exceptions.ContextChangedException.html": {
    "href": "api/ComponentTask.Exceptions.ContextChangedException.html",
    "title": "Class ContextChangedException | ComponentTask",
    "keywords": "Class ContextChangedException Exception that is thrown when the 'SynchronizationContext.Current' changes unexpectedly, most likely caused by code that sets 'SynchronizationContext.Current' but does not set it back to the previous. Inheritance System.Object System.Exception System.SystemException System.InvalidOperationException ContextChangedException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ComponentTask.Exceptions Assembly : cs.temp.dll.dll Syntax public sealed class ContextChangedException : InvalidOperationException, ISerializable, _Exception Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/ComponentTask.html": {
    "href": "api/ComponentTask.html",
    "title": "Namespace ComponentTask | ComponentTask",
    "keywords": "Namespace ComponentTask Classes Config Global configuration. LocalTaskRunner TaskRunner that you can 'tick' manually. Interfaces IDiagnosticLogger Interface for logging diagnostic output. IExceptionHandler Interface for a exception handler. ITaskRunner Runner for running tasks."
  },
  "api/ComponentTask.Config.html": {
    "href": "api/ComponentTask.Config.html",
    "title": "Class Config | ComponentTask",
    "keywords": "Class Config Global configuration. Inheritance System.Object Config Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ToString() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ComponentTask Assembly : cs.temp.dll.dll Syntax public static class Config Properties GlobalDiagnosticsActive Should diagnostics be enabled. Declaration public static bool GlobalDiagnosticsActive { get; set; } Property Value Type Description System.Boolean True if diagnostics are active, otherwise false. Remarks Runs all tasks with the ' DiagnosticLogging ' flag."
  },
  "api/ComponentTask.Exceptions.NonUnityThreadException.html": {
    "href": "api/ComponentTask.Exceptions.NonUnityThreadException.html",
    "title": "Class NonUnityThreadException | ComponentTask",
    "keywords": "Class NonUnityThreadException Exception that is thrown when an api that can only be called from the unity-thread is called from a different thread. Inheritance System.Object System.Exception System.SystemException System.InvalidOperationException NonUnityThreadException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ComponentTask.Exceptions Assembly : cs.temp.dll.dll Syntax public sealed class NonUnityThreadException : InvalidOperationException, ISerializable, _Exception Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/UnityEngine.TaskRunOptions.html": {
    "href": "api/UnityEngine.TaskRunOptions.html",
    "title": "Enum TaskRunOptions | ComponentTask",
    "keywords": "Enum TaskRunOptions Flags for configuring how tasks are being run. Namespace : UnityEngine Assembly : cs.temp.dll.dll Syntax [Flags] public enum TaskRunOptions Fields Name Description Default Default run options. DiagnosticLogging Enable diagnostic logging. UpdateWhileComponentDisabled Tasks are updated even if the component is disabled."
  },
  "api/ComponentTask.Exceptions.InactiveComponentException.html": {
    "href": "api/ComponentTask.Exceptions.InactiveComponentException.html",
    "title": "Class InactiveComponentException | ComponentTask",
    "keywords": "Class InactiveComponentException Exception that is thrown when attempting to execute a operation on a inactive component. Inheritance System.Object System.Exception System.SystemException System.InvalidOperationException InactiveComponentException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ComponentTask.Exceptions Assembly : cs.temp.dll.dll Syntax public sealed class InactiveComponentException : InvalidOperationException, ISerializable, _Exception Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/UnityEngine.TaskExtensions.html": {
    "href": "api/UnityEngine.TaskExtensions.html",
    "title": "Class TaskExtensions | ComponentTask",
    "keywords": "Class TaskExtensions Extensions for 'System.Task'. Inheritance System.Object TaskExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ToString() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : UnityEngine Assembly : cs.temp.dll.dll Syntax public static class TaskExtensions Methods DontWait(Task) Extension method to suppress the warning you get when you don't await a task in a async method. Declaration public static void DontWait(this Task task) Parameters Type Name Description System.Threading.Tasks.Task task Task to not wait for. Remarks Should only be used when you are sure that not-waiting for the task is what you want."
  },
  "api/UnityEngine.GameObjectExtensions.html": {
    "href": "api/UnityEngine.GameObjectExtensions.html",
    "title": "Class GameObjectExtensions | ComponentTask",
    "keywords": "Class GameObjectExtensions Extensions for 'UnityEngine.GameObject'. Inheritance System.Object GameObjectExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ToString() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : UnityEngine Assembly : cs.temp.dll.dll Syntax public static class GameObjectExtensions Methods CreateTaskRunner(GameObject, TaskRunOptions) Create a ITaskRunner on the given gameobject. Declaration public static ITaskRunner CreateTaskRunner(this GameObject gameObject, TaskRunOptions options = TaskRunOptions.Default) Parameters Type Name Description GameObject gameObject GameObject to create the task-runner on. TaskRunOptions options Options for configuring how tasks are run on this runner. Returns Type Description ITaskRunner Newly created ITaskRunner . Remarks If you run tasks on the returned runner then they are cancelled automatically when the gameobject is destroyed. Can only be called from the unity-thread in play-mode. Exceptions Type Condition NotPlayingException Thrown when called in edit-mode. NonUnityThreadException Thrown when called from a non-unity thread."
  },
  "api/ComponentTask.IExceptionHandler.html": {
    "href": "api/ComponentTask.IExceptionHandler.html",
    "title": "Interface IExceptionHandler | ComponentTask",
    "keywords": "Interface IExceptionHandler Interface for a exception handler. Namespace : ComponentTask Assembly : cs.temp.dll.dll Syntax public interface IExceptionHandler Remarks Can be used to log exceptions when using a custom LocalTaskRunner . Methods Handle(Exception) Handle the exception that was thrown. Declaration void Handle(Exception exception) Parameters Type Name Description System.Exception exception Exception that was thrown."
  },
  "api/ComponentTask.Exceptions.NotPlayingException.html": {
    "href": "api/ComponentTask.Exceptions.NotPlayingException.html",
    "title": "Class NotPlayingException | ComponentTask",
    "keywords": "Class NotPlayingException Exception that is thrown when an api that can only be called while 'Playing' is called in edit-mode. Inheritance System.Object System.Exception System.SystemException System.InvalidOperationException NotPlayingException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ComponentTask.Exceptions Assembly : cs.temp.dll.dll Syntax public sealed class NotPlayingException : InvalidOperationException, ISerializable, _Exception Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/ComponentTask.Exceptions.html": {
    "href": "api/ComponentTask.Exceptions.html",
    "title": "Namespace ComponentTask.Exceptions | ComponentTask",
    "keywords": "Namespace ComponentTask.Exceptions Classes ComponentTaskCanceledException Exception that is attached to tasks returned from ITaskRunner when they are cancelled. ContextChangedException Exception that is thrown when the 'SynchronizationContext.Current' changes unexpectedly, most likely caused by code that sets 'SynchronizationContext.Current' but does not set it back to the previous. InactiveComponentException Exception that is thrown when attempting to execute a operation on a inactive component. InactiveGameObjectException Exception that is thrown when attempting to execute a operation on a inactive gameobject. NonUnityThreadException Exception that is thrown when an api that can only be called from the unity-thread is called from a different thread. NotPlayingException Exception that is thrown when an api that can only be called while 'Playing' is called in edit-mode. TaskCreatorReturnedNullException Exception that is thrown when a task-creator returns null."
  },
  "api/ComponentTask.Exceptions.TaskCreatorReturnedNullException.html": {
    "href": "api/ComponentTask.Exceptions.TaskCreatorReturnedNullException.html",
    "title": "Class TaskCreatorReturnedNullException | ComponentTask",
    "keywords": "Class TaskCreatorReturnedNullException Exception that is thrown when a task-creator returns null. Inheritance System.Object System.Exception System.SystemException System.InvalidOperationException TaskCreatorReturnedNullException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ComponentTask.Exceptions Assembly : cs.temp.dll.dll Syntax public sealed class TaskCreatorReturnedNullException : InvalidOperationException, ISerializable, _Exception Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/ComponentTask.IDiagnosticLogger.html": {
    "href": "api/ComponentTask.IDiagnosticLogger.html",
    "title": "Interface IDiagnosticLogger | ComponentTask",
    "keywords": "Interface IDiagnosticLogger Interface for logging diagnostic output. Namespace : ComponentTask Assembly : cs.temp.dll.dll Syntax public interface IDiagnosticLogger Remarks Can be used to get diagnostic output when using a custom LocalTaskRunner . Methods Log(String) Log a diagnostic message. Declaration void Log(string message) Parameters Type Name Description System.String message Message to log."
  },
  "api/UnityEngine.html": {
    "href": "api/UnityEngine.html",
    "title": "Namespace UnityEngine | ComponentTask",
    "keywords": "Namespace UnityEngine Classes ComponentExtensions Extensions for 'UnityEngine.Component'. GameObjectExtensions Extensions for 'UnityEngine.GameObject'. TaskExtensions Extensions for 'System.Task'. Enums TaskRunOptions Flags for configuring how tasks are being run."
  },
  "api/ComponentTask.ITaskRunner.html": {
    "href": "api/ComponentTask.ITaskRunner.html",
    "title": "Interface ITaskRunner | ComponentTask",
    "keywords": "Interface ITaskRunner Runner for running tasks. Namespace : ComponentTask Assembly : cs.temp.dll.dll Syntax public interface ITaskRunner Methods StartTask(Func<CancellationToken, Task>) Start a task on this runner. System.Threading.CancellationToken that is passed to the task-creator is cancelled when the runner is disposed, this can be usefull for cancelling external processes. Declaration Task StartTask(Func<CancellationToken, Task> taskCreator) Parameters Type Name Description System.Func < System.Threading.CancellationToken , System.Threading.Tasks.Task > taskCreator Function for creating the task. Returns Type Description System.Threading.Tasks.Task Task that completes when the original task completes or when the runner gets disposed. Exceptions Type Condition TaskCreatorReturnedNullException Thrown when null is returned from the 'taskCreator'. ComponentTaskCanceledException Thrown when awaiting a component-task that gets cancelled. Can happen if you are awaiting a component that gets destroyed. StartTask(Func<Task>) Start a task on this runner. Declaration Task StartTask(Func<Task> taskCreator) Parameters Type Name Description System.Func < System.Threading.Tasks.Task > taskCreator Function for creating the task. Returns Type Description System.Threading.Tasks.Task Task that completes when the original task completes or when the runner gets disposed. Exceptions Type Condition TaskCreatorReturnedNullException Thrown when null is returned from the 'taskCreator'. ComponentTaskCanceledException Thrown when awaiting a component-task that gets cancelled. StartTask<TIn>(Func<TIn, CancellationToken, Task>, TIn) Start a task on this runner. System.Threading.CancellationToken that is passed to the task-creator is cancelled when the runner is disposed, this can be usefull for cancelling external processes. Declaration Task StartTask<TIn>(Func<TIn, CancellationToken, Task> taskCreator, TIn data) Parameters Type Name Description System.Func <TIn, System.Threading.CancellationToken , System.Threading.Tasks.Task > taskCreator Function for creating the task. TIn data Data to pass into the taskCreator . Returns Type Description System.Threading.Tasks.Task Task that completes when the original task completes or when the runner gets disposed. Type Parameters Name Description TIn Type of the data to pass into the taskCreator . Exceptions Type Condition TaskCreatorReturnedNullException Thrown when null is returned from the 'taskCreator'. ComponentTaskCanceledException Thrown when awaiting a component-task that gets cancelled. Can happen if you are awaiting a component that gets destroyed. StartTask<TIn>(Func<TIn, Task>, TIn) Start a task on this runner. Declaration Task StartTask<TIn>(Func<TIn, Task> taskCreator, TIn data) Parameters Type Name Description System.Func <TIn, System.Threading.Tasks.Task > taskCreator Function for creating the task. TIn data Data to pass into the taskCreator . Returns Type Description System.Threading.Tasks.Task Task that completes when the original task completes or when the runner gets disposed. Type Parameters Name Description TIn Type of the data to pass into the taskCreator . Exceptions Type Condition TaskCreatorReturnedNullException Thrown when null is returned from the 'taskCreator'. ComponentTaskCanceledException Thrown when awaiting a component-task that gets cancelled. StartTask<TOut>(Func<CancellationToken, Task<TOut>>) Start a task on this runner. System.Threading.CancellationToken that is passed to the task-creator is cancelled when the runner is disposed, this can be usefull for cancelling external processes. Declaration Task<TOut> StartTask<TOut>(Func<CancellationToken, Task<TOut>> taskCreator) Parameters Type Name Description System.Func < System.Threading.CancellationToken , System.Threading.Tasks.Task <TOut>> taskCreator Function for creating the task. Returns Type Description System.Threading.Tasks.Task <TOut> Task that completes when the original task completes or when the runner gets disposed. Type Parameters Name Description TOut Exceptions Type Condition TaskCreatorReturnedNullException Thrown when null is returned from the 'taskCreator'. ComponentTaskCanceledException Thrown when awaiting a component-task that gets cancelled. Can happen if you are awaiting a component that gets destroyed. StartTask<TOut>(Func<Task<TOut>>) Start a task on this runner. Declaration Task<TOut> StartTask<TOut>(Func<Task<TOut>> taskCreator) Parameters Type Name Description System.Func < System.Threading.Tasks.Task <TOut>> taskCreator Function for creating the task. Returns Type Description System.Threading.Tasks.Task <TOut> Task that completes when the original task completes or when the runner gets disposed. Type Parameters Name Description TOut Exceptions Type Condition TaskCreatorReturnedNullException Thrown when null is returned from the 'taskCreator'. ComponentTaskCanceledException Thrown when awaiting a component-task that gets cancelled. StartTask<TIn, TOut>(Func<TIn, CancellationToken, Task<TOut>>, TIn) Start a task on this runner. System.Threading.CancellationToken that is passed to the task-creator is cancelled when the runner is disposed, this can be usefull for cancelling external processes. Declaration Task<TOut> StartTask<TIn, TOut>(Func<TIn, CancellationToken, Task<TOut>> taskCreator, TIn data) Parameters Type Name Description System.Func <TIn, System.Threading.CancellationToken , System.Threading.Tasks.Task <TOut>> taskCreator Function for creating the task. TIn data Returns Type Description System.Threading.Tasks.Task <TOut> Task that completes when the original task completes or when the runner gets disposed. Type Parameters Name Description TIn TOut Exceptions Type Condition TaskCreatorReturnedNullException Thrown when null is returned from the 'taskCreator'. ComponentTaskCanceledException Thrown when awaiting a component-task that gets cancelled. Can happen if you are awaiting a component that gets destroyed. StartTask<TIn, TOut>(Func<TIn, Task<TOut>>, TIn) Start a task on this runner. Declaration Task<TOut> StartTask<TIn, TOut>(Func<TIn, Task<TOut>> taskCreator, TIn data) Parameters Type Name Description System.Func <TIn, System.Threading.Tasks.Task <TOut>> taskCreator Function for creating the task. TIn data Data to pass into the taskCreator . Returns Type Description System.Threading.Tasks.Task <TOut> Task that completes when the original task completes or when the runner gets disposed. Type Parameters Name Description TIn Type of the data to pass into the taskCreator . TOut Exceptions Type Condition TaskCreatorReturnedNullException Thrown when null is returned from the 'taskCreator'. ComponentTaskCanceledException Thrown when awaiting a component-task that gets cancelled."
  },
  "api/ComponentTask.LocalTaskRunner.html": {
    "href": "api/ComponentTask.LocalTaskRunner.html",
    "title": "Class LocalTaskRunner | ComponentTask",
    "keywords": "Class LocalTaskRunner TaskRunner that you can 'tick' manually. Inheritance System.Object LocalTaskRunner Implements ITaskRunner System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ToString() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ComponentTask Assembly : cs.temp.dll.dll Syntax public sealed class LocalTaskRunner : ITaskRunner, IDisposable Constructors LocalTaskRunner(IExceptionHandler) Construct a new instance of the LocalTaskRunner class. Declaration public LocalTaskRunner(IExceptionHandler exceptionHandler) Parameters Type Name Description IExceptionHandler exceptionHandler Handler to use when exception occur in tasks. Methods AssertRunningTaskCount(Int32) Valid in 'DEBUG' only, useful for tests. Declaration public void AssertRunningTaskCount(int expectedCount) Parameters Type Name Description System.Int32 expectedCount Dispose() Declaration public void Dispose() Execute() Execute all the work that was 'scheduled' by the tasks running on this runner. Declaration public void Execute() StartTask(Func<CancellationToken, Task>) Start a task on this runner. System.Threading.CancellationToken that is passed to the task-creator is cancelled when the runner is disposed, this can be usefull for cancelling external processes. Declaration public Task StartTask(Func<CancellationToken, Task> taskCreator) Parameters Type Name Description System.Func < System.Threading.CancellationToken , System.Threading.Tasks.Task > taskCreator Function for creating the task. Returns Type Description System.Threading.Tasks.Task Task that completes when the original task completes or when the runner gets disposed. Exceptions Type Condition TaskCreatorReturnedNullException Thrown when null is returned from the 'taskCreator'. ComponentTaskCanceledException Thrown when awaiting a component-task that gets cancelled. Can happen if you are awaiting a component that gets destroyed. StartTask(Func<CancellationToken, Task>, IDiagnosticLogger) Declaration public Task StartTask(Func<CancellationToken, Task> taskCreator, IDiagnosticLogger logger) Parameters Type Name Description System.Func < System.Threading.CancellationToken , System.Threading.Tasks.Task > taskCreator IDiagnosticLogger logger Optional logger to output diagnostic messages to. Returns Type Description System.Threading.Tasks.Task StartTask(Func<Task>) Start a task on this runner. Declaration public Task StartTask(Func<Task> taskCreator) Parameters Type Name Description System.Func < System.Threading.Tasks.Task > taskCreator Function for creating the task. Returns Type Description System.Threading.Tasks.Task Task that completes when the original task completes or when the runner gets disposed. Exceptions Type Condition TaskCreatorReturnedNullException Thrown when null is returned from the 'taskCreator'. ComponentTaskCanceledException Thrown when awaiting a component-task that gets cancelled. StartTask(Func<Task>, IDiagnosticLogger) Declaration public Task StartTask(Func<Task> taskCreator, IDiagnosticLogger logger) Parameters Type Name Description System.Func < System.Threading.Tasks.Task > taskCreator IDiagnosticLogger logger Optional logger to output diagnostic messages to. Returns Type Description System.Threading.Tasks.Task StartTask<TIn>(Func<TIn, CancellationToken, Task>, TIn) Declaration public Task StartTask<TIn>(Func<TIn, CancellationToken, Task> taskCreator, TIn data) Parameters Type Name Description System.Func <TIn, System.Threading.CancellationToken , System.Threading.Tasks.Task > taskCreator TIn data Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TIn StartTask<TIn>(Func<TIn, CancellationToken, Task>, TIn, IDiagnosticLogger) Declaration public Task StartTask<TIn>(Func<TIn, CancellationToken, Task> taskCreator, TIn data, IDiagnosticLogger logger) Parameters Type Name Description System.Func <TIn, System.Threading.CancellationToken , System.Threading.Tasks.Task > taskCreator TIn data IDiagnosticLogger logger Optional logger to output diagnostic messages to. Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TIn StartTask<TIn>(Func<TIn, Task>, TIn) Declaration public Task StartTask<TIn>(Func<TIn, Task> taskCreator, TIn data) Parameters Type Name Description System.Func <TIn, System.Threading.Tasks.Task > taskCreator TIn data Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TIn StartTask<TIn>(Func<TIn, Task>, TIn, IDiagnosticLogger) Declaration public Task StartTask<TIn>(Func<TIn, Task> taskCreator, TIn data, IDiagnosticLogger logger) Parameters Type Name Description System.Func <TIn, System.Threading.Tasks.Task > taskCreator TIn data IDiagnosticLogger logger Optional logger to output diagnostic messages to. Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TIn StartTask<TOut>(Func<CancellationToken, Task<TOut>>) Declaration public Task<TOut> StartTask<TOut>(Func<CancellationToken, Task<TOut>> taskCreator) Parameters Type Name Description System.Func < System.Threading.CancellationToken , System.Threading.Tasks.Task <TOut>> taskCreator Returns Type Description System.Threading.Tasks.Task <TOut> Type Parameters Name Description TOut StartTask<TOut>(Func<CancellationToken, Task<TOut>>, IDiagnosticLogger) Declaration public Task<TOut> StartTask<TOut>(Func<CancellationToken, Task<TOut>> taskCreator, IDiagnosticLogger logger) Parameters Type Name Description System.Func < System.Threading.CancellationToken , System.Threading.Tasks.Task <TOut>> taskCreator IDiagnosticLogger logger Optional logger to output diagnostic messages to. Returns Type Description System.Threading.Tasks.Task <TOut> Type Parameters Name Description TOut StartTask<TOut>(Func<Task<TOut>>) Declaration public Task<TOut> StartTask<TOut>(Func<Task<TOut>> taskCreator) Parameters Type Name Description System.Func < System.Threading.Tasks.Task <TOut>> taskCreator Returns Type Description System.Threading.Tasks.Task <TOut> Type Parameters Name Description TOut StartTask<TOut>(Func<Task<TOut>>, IDiagnosticLogger) Declaration public Task<TOut> StartTask<TOut>(Func<Task<TOut>> taskCreator, IDiagnosticLogger logger) Parameters Type Name Description System.Func < System.Threading.Tasks.Task <TOut>> taskCreator IDiagnosticLogger logger Optional logger to output diagnostic messages to. Returns Type Description System.Threading.Tasks.Task <TOut> Type Parameters Name Description TOut StartTask<TIn, TOut>(Func<TIn, CancellationToken, Task<TOut>>, TIn) Declaration public Task<TOut> StartTask<TIn, TOut>(Func<TIn, CancellationToken, Task<TOut>> taskCreator, TIn data) Parameters Type Name Description System.Func <TIn, System.Threading.CancellationToken , System.Threading.Tasks.Task <TOut>> taskCreator TIn data Returns Type Description System.Threading.Tasks.Task <TOut> Type Parameters Name Description TIn TOut StartTask<TIn, TOut>(Func<TIn, CancellationToken, Task<TOut>>, TIn, IDiagnosticLogger) Declaration public Task<TOut> StartTask<TIn, TOut>(Func<TIn, CancellationToken, Task<TOut>> taskCreator, TIn data, IDiagnosticLogger logger) Parameters Type Name Description System.Func <TIn, System.Threading.CancellationToken , System.Threading.Tasks.Task <TOut>> taskCreator TIn data IDiagnosticLogger logger Optional logger to output diagnostic messages to. Returns Type Description System.Threading.Tasks.Task <TOut> Type Parameters Name Description TIn TOut StartTask<TIn, TOut>(Func<TIn, Task<TOut>>, TIn) Declaration public Task<TOut> StartTask<TIn, TOut>(Func<TIn, Task<TOut>> taskCreator, TIn data) Parameters Type Name Description System.Func <TIn, System.Threading.Tasks.Task <TOut>> taskCreator TIn data Returns Type Description System.Threading.Tasks.Task <TOut> Type Parameters Name Description TIn TOut StartTask<TIn, TOut>(Func<TIn, Task<TOut>>, TIn, IDiagnosticLogger) Declaration public Task<TOut> StartTask<TIn, TOut>(Func<TIn, Task<TOut>> taskCreator, TIn data, IDiagnosticLogger logger) Parameters Type Name Description System.Func <TIn, System.Threading.Tasks.Task <TOut>> taskCreator TIn data IDiagnosticLogger logger Optional logger to output diagnostic messages to. Returns Type Description System.Threading.Tasks.Task <TOut> Type Parameters Name Description TIn TOut Implements ITaskRunner System.IDisposable"
  }
}